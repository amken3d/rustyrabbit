import { Button,   VerticalBox, HorizontalBox, SpinBox, ComboBox } from "std-widgets.slint";

export component CalibrationViewPort {
    in-out property<string> selected_calibration: "Chessboard";
    in-out property<int> grid_rows: 6;
    in-out property<int> grid_cols: 9;
    in-out property<int> loc_x: 0;
    in-out property<int> loc_y: 0;


    VerticalLayout {
        spacing: 10px;
        padding: 10px;

        Text { text: "Select Calibration Type:"; font-size: 18px; }

        ComboBox {  padding-left: 5px;
                    width: self.preferred-width * 2;  height: self.preferred-height *2 ;
                    model: ["Chess Board", "Circle Grid", "Rabbit P&P Aruco"];
                    current-value: "Chess Board";
                }

        Rectangle {
          padding: 10px;

            VerticalLayout {
                spacing: 10px;


                if (selected_calibration == "Chessboard" || selected_calibration == "Circle Grid" ):
                    HorizontalBox {
                        Text { vertical-alignment: center;text: "Grid Rows:"; }
                        SpinBox { width: 150px;value: grid_rows;  }
                    }
                    HorizontalBox {
                        Text { vertical-alignment: center;text: "Grid Columns:"; }
                        SpinBox { width: 150px;value: grid_cols;  }
                    }
                if selected_calibration == "Rabbit PnP Aruco":
                    HorizontalBox {
                        Text { vertical-alignment: center;text: "Location X:"; }
                        SpinBox { width: 150px;value: loc_x;  }
                    }
                    HorizontalBox {
                        Text { vertical-alignment: center; text: "Grid Columns:"; }
                        SpinBox { width: 150px;value: loc_y;  }
                    }

                }
            }


        Button {
            text: "Start Calibration";
            //clicked => { start_calibration(selected_calibration, grid_rows + "x" + grid_cols); }
        }
    }
}
